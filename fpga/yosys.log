
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33+72 (git sha1 ac8b31e00, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Parsing `src/rgb_mixer.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: src/rgb_mixer.v
Parsing Verilog input from `src/rgb_mixer.v' to AST representation.
Storing AST representation for module `$abstract\rgb_mixer'.
Successfully finished Verilog frontend.

-- Parsing `src/encoder.v' using frontend ` -vlog2k' --

2. Executing Verilog-2005 frontend: src/encoder.v
Parsing Verilog input from `src/encoder.v' to AST representation.
Storing AST representation for module `$abstract\encoder'.
Successfully finished Verilog frontend.

-- Parsing `src/debounce.v' using frontend ` -vlog2k' --

3. Executing Verilog-2005 frontend: src/debounce.v
Parsing Verilog input from `src/debounce.v' to AST representation.
Storing AST representation for module `$abstract\debounce'.
Successfully finished Verilog frontend.

-- Parsing `src/pwm.v' using frontend ` -vlog2k' --

4. Executing Verilog-2005 frontend: src/pwm.v
Parsing Verilog input from `src/pwm.v' to AST representation.
Storing AST representation for module `$abstract\pwm'.
Successfully finished Verilog frontend.

-- Parsing `src/slow_clk.v' using frontend ` -vlog2k' --

5. Executing Verilog-2005 frontend: src/slow_clk.v
Parsing Verilog input from `src/slow_clk.v' to AST representation.
Storing AST representation for module `$abstract\slow_clk'.
Successfully finished Verilog frontend.

-- Parsing `src/random.v' using frontend ` -vlog2k' --

6. Executing Verilog-2005 frontend: src/random.v
Parsing Verilog input from `src/random.v' to AST representation.
Storing AST representation for module `$abstract\random'.
Successfully finished Verilog frontend.

-- Parsing `src/oneshot.v' using frontend ` -vlog2k' --

7. Executing Verilog-2005 frontend: src/oneshot.v
Parsing Verilog input from `src/oneshot.v' to AST representation.
Storing AST representation for module `$abstract\oneshot'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top rgb_mixer -json fpga/rgb_mixer.json' --

8. Executing SYNTH_ICE40 pass.

8.1. Executing Verilog-2005 frontend: /home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

8.2. Executing HIERARCHY pass (managing design hierarchy).

8.3. Executing AST frontend in derive mode using pre-parsed AST for module `\rgb_mixer'.
Generating RTLIL representation for module `\rgb_mixer'.

8.3.1. Analyzing design hierarchy..
Top module:  \rgb_mixer
Parameter \TIME = 10

8.3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\oneshot'.
Parameter \TIME = 10
Generating RTLIL representation for module `$paramod\oneshot\TIME=s32'00000000000000000000000000001010'.

8.3.3. Executing AST frontend in derive mode using pre-parsed AST for module `\random'.
Generating RTLIL representation for module `\random'.
Parameter \WIDTH = 8

8.3.4. Executing AST frontend in derive mode using pre-parsed AST for module `\pwm'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\pwm\WIDTH=s32'00000000000000000000000000001000'.
Parameter \WIDTH = 8

8.3.5. Executing AST frontend in derive mode using pre-parsed AST for module `\encoder'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\encoder\WIDTH=s32'00000000000000000000000000001000'.
Parameter \HIST_LEN = 8

8.3.6. Executing AST frontend in derive mode using pre-parsed AST for module `\debounce'.
Parameter \HIST_LEN = 8
Generating RTLIL representation for module `$paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000'.
Parameter \HIST_LEN = 8
Found cached RTLIL representation for module `$paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000'.

8.3.7. Executing AST frontend in derive mode using pre-parsed AST for module `\slow_clk'.
Generating RTLIL representation for module `\slow_clk'.

8.3.8. Analyzing design hierarchy..
Top module:  \rgb_mixer
Used module:     $paramod\oneshot\TIME=s32'00000000000000000000000000001010
Used module:     \random
Used module:     $paramod\pwm\WIDTH=s32'00000000000000000000000000001000
Used module:     $paramod\encoder\WIDTH=s32'00000000000000000000000000001000
Used module:     $paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000
Used module:     \slow_clk

8.3.9. Analyzing design hierarchy..
Top module:  \rgb_mixer
Used module:     $paramod\oneshot\TIME=s32'00000000000000000000000000001010
Used module:     \random
Used module:     $paramod\pwm\WIDTH=s32'00000000000000000000000000001000
Used module:     $paramod\encoder\WIDTH=s32'00000000000000000000000000001000
Used module:     $paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000
Used module:     \slow_clk
Removing unused module `$abstract\oneshot'.
Removing unused module `$abstract\random'.
Removing unused module `$abstract\slow_clk'.
Removing unused module `$abstract\pwm'.
Removing unused module `$abstract\debounce'.
Removing unused module `$abstract\encoder'.
Removing unused module `$abstract\rgb_mixer'.
Removed 7 unused modules.

8.4. Executing PROC pass (convert processes to netlists).

8.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $proc$src/slow_clk.v:10$405 in module slow_clk.
Marked 2 switch rules as full_case in process $proc$src/debounce.v:16$402 in module $paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000.
Marked 2 switch rules as full_case in process $proc$src/encoder.v:18$397 in module $paramod\encoder\WIDTH=s32'00000000000000000000000000001000.
Marked 1 switch rules as full_case in process $proc$src/pwm.v:17$394 in module $paramod\pwm\WIDTH=s32'00000000000000000000000000001000.
Marked 2 switch rules as full_case in process $proc$src/random.v:18$386 in module random.
Marked 3 switch rules as full_case in process $proc$src/oneshot.v:16$381 in module $paramod\oneshot\TIME=s32'00000000000000000000000000001010.
Removed a total of 0 dead cases.

8.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 15 redundant assignments.
Promoted 23 assignments to connections.

8.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$216'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$206'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$202'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$195'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$191'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$184'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$181'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$178'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$175'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$172'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$170'.
  Set init value: \Q = 1'0

8.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Found async reset \R in `\SB_DFFNER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Found async reset \S in `\SB_DFFNS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
Found async reset \R in `\SB_DFFNR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
Found async reset \S in `\SB_DFFES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Found async reset \R in `\SB_DFFER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Found async reset \S in `\SB_DFFS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
Found async reset \R in `\SB_DFFR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
Found async reset \reset in `$paramod\oneshot\TIME=s32'00000000000000000000000000001010.$proc$src/oneshot.v:16$381'.

8.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~30 debug messages>

8.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFNES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFNER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFNS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$216'.
Creating decoders for process `\SB_DFFNR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$213'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFNE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFN.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:882$207'.
Creating decoders for process `\SB_DFFES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$206'.
Creating decoders for process `\SB_DFFES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$202'.
Creating decoders for process `\SB_DFFESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$195'.
Creating decoders for process `\SB_DFFER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$191'.
Creating decoders for process `\SB_DFFESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$184'.
Creating decoders for process `\SB_DFFS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$181'.
Creating decoders for process `\SB_DFFSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$178'.
Creating decoders for process `\SB_DFFR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$175'.
Creating decoders for process `\SB_DFFSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$172'.
Creating decoders for process `\SB_DFFE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$170'.
Creating decoders for process `\SB_DFF.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:271$169'.
Creating decoders for process `\slow_clk.$proc$src/slow_clk.v:10$405'.
     1/1: $0\divider[13:0]
Creating decoders for process `$paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000.$proc$src/debounce.v:16$402'.
     1/2: $0\button_hist[7:0]
     2/2: $0\debounced[0:0]
Creating decoders for process `$paramod\encoder\WIDTH=s32'00000000000000000000000000001000.$proc$src/encoder.v:18$397'.
     1/4: $0\value[7:0]
     2/4: $0\old_b[0:0]
     3/4: $0\old_a[0:0]
     4/4: $0\leds[3:0]
Creating decoders for process `$paramod\pwm\WIDTH=s32'00000000000000000000000000001000.$proc$src/pwm.v:17$394'.
     1/1: $0\count[7:0]
Creating decoders for process `\random.$proc$src/random.v:18$386'.
     1/5: $1\cnt[31:0]
     2/5: $0\cnt[31:0]
     3/5: $0\fb[0:0]
     4/5: $0\pulse[0:0]
     5/5: $0\level[31:0]
Creating decoders for process `$paramod\oneshot\TIME=s32'00000000000000000000000000001010.$proc$src/oneshot.v:16$381'.
     1/3: $0\pulse_d[0:0]
     2/3: $0\counter[4:0]
     3/3: $0\pout[0:0]

8.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

8.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
  created $adff cell `$procdff$512' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
  created $dff cell `$procdff$513' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
  created $adff cell `$procdff$514' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
  created $dff cell `$procdff$515' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
  created $adff cell `$procdff$516' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
  created $dff cell `$procdff$517' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
  created $adff cell `$procdff$518' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
  created $dff cell `$procdff$519' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
  created $dff cell `$procdff$520' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:882$207'.
  created $dff cell `$procdff$521' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
  created $adff cell `$procdff$522' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
  created $dff cell `$procdff$523' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
  created $adff cell `$procdff$524' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
  created $dff cell `$procdff$525' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
  created $adff cell `$procdff$526' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
  created $dff cell `$procdff$527' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
  created $adff cell `$procdff$528' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
  created $dff cell `$procdff$529' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
  created $dff cell `$procdff$530' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:271$169'.
  created $dff cell `$procdff$531' with positive edge clock.
Creating register for signal `\slow_clk.\clock' using process `\slow_clk.$proc$src/slow_clk.v:10$405'.
  created $dff cell `$procdff$532' with positive edge clock.
Creating register for signal `\slow_clk.\divider' using process `\slow_clk.$proc$src/slow_clk.v:10$405'.
  created $dff cell `$procdff$533' with positive edge clock.
Creating register for signal `$paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000.\debounced' using process `$paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000.$proc$src/debounce.v:16$402'.
  created $dff cell `$procdff$534' with positive edge clock.
Creating register for signal `$paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000.\button_hist' using process `$paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000.$proc$src/debounce.v:16$402'.
  created $dff cell `$procdff$535' with positive edge clock.
Creating register for signal `$paramod\encoder\WIDTH=s32'00000000000000000000000000001000.\leds' using process `$paramod\encoder\WIDTH=s32'00000000000000000000000000001000.$proc$src/encoder.v:18$397'.
  created $dff cell `$procdff$536' with positive edge clock.
Creating register for signal `$paramod\encoder\WIDTH=s32'00000000000000000000000000001000.\value' using process `$paramod\encoder\WIDTH=s32'00000000000000000000000000001000.$proc$src/encoder.v:18$397'.
  created $dff cell `$procdff$537' with positive edge clock.
Creating register for signal `$paramod\encoder\WIDTH=s32'00000000000000000000000000001000.\old_a' using process `$paramod\encoder\WIDTH=s32'00000000000000000000000000001000.$proc$src/encoder.v:18$397'.
  created $dff cell `$procdff$538' with positive edge clock.
Creating register for signal `$paramod\encoder\WIDTH=s32'00000000000000000000000000001000.\old_b' using process `$paramod\encoder\WIDTH=s32'00000000000000000000000000001000.$proc$src/encoder.v:18$397'.
  created $dff cell `$procdff$539' with positive edge clock.
Creating register for signal `$paramod\pwm\WIDTH=s32'00000000000000000000000000001000.\count' using process `$paramod\pwm\WIDTH=s32'00000000000000000000000000001000.$proc$src/pwm.v:17$394'.
  created $dff cell `$procdff$540' with positive edge clock.
Creating register for signal `\random.\level' using process `\random.$proc$src/random.v:18$386'.
  created $dff cell `$procdff$541' with positive edge clock.
Creating register for signal `\random.\pulse' using process `\random.$proc$src/random.v:18$386'.
  created $dff cell `$procdff$542' with positive edge clock.
Creating register for signal `\random.\fb' using process `\random.$proc$src/random.v:18$386'.
  created $dff cell `$procdff$543' with positive edge clock.
Creating register for signal `\random.\cnt' using process `\random.$proc$src/random.v:18$386'.
  created $dff cell `$procdff$544' with positive edge clock.
Creating register for signal `$paramod\oneshot\TIME=s32'00000000000000000000000000001010.\pout' using process `$paramod\oneshot\TIME=s32'00000000000000000000000000001010.$proc$src/oneshot.v:16$381'.
  created $adff cell `$procdff$545' with positive edge clock and positive level reset.
Creating register for signal `$paramod\oneshot\TIME=s32'00000000000000000000000000001010.\counter' using process `$paramod\oneshot\TIME=s32'00000000000000000000000000001010.$proc$src/oneshot.v:16$381'.
  created $adff cell `$procdff$546' with positive edge clock and positive level reset.
Creating register for signal `$paramod\oneshot\TIME=s32'00000000000000000000000000001010.\pulse_d' using process `$paramod\oneshot\TIME=s32'00000000000000000000000000001010.$proc$src/oneshot.v:16$381'.
  created $adff cell `$procdff$547' with positive edge clock and positive level reset.

8.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

8.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$240'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$233'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$229'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$222'.
Removing empty process `SB_DFFNS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
Removing empty process `SB_DFFNSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$216'.
Removing empty process `SB_DFFNR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
Removing empty process `SB_DFFNSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$213'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFNE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFN.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFFN.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:882$207'.
Removing empty process `SB_DFFES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$206'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFES.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$202'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFESS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$195'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFER.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$191'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFESR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$184'.
Removing empty process `SB_DFFS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
Removing empty process `SB_DFFSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$181'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFSS.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$178'.
Removing empty process `SB_DFFR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
Removing empty process `SB_DFFSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$175'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFSR.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$172'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFFE.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFF.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$170'.
Removing empty process `SB_DFF.$proc$/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:271$169'.
Found and cleaned up 1 empty switch in `\slow_clk.$proc$src/slow_clk.v:10$405'.
Removing empty process `slow_clk.$proc$src/slow_clk.v:10$405'.
Found and cleaned up 3 empty switches in `$paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000.$proc$src/debounce.v:16$402'.
Removing empty process `$paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000.$proc$src/debounce.v:16$402'.
Found and cleaned up 2 empty switches in `$paramod\encoder\WIDTH=s32'00000000000000000000000000001000.$proc$src/encoder.v:18$397'.
Removing empty process `$paramod\encoder\WIDTH=s32'00000000000000000000000000001000.$proc$src/encoder.v:18$397'.
Found and cleaned up 1 empty switch in `$paramod\pwm\WIDTH=s32'00000000000000000000000000001000.$proc$src/pwm.v:17$394'.
Removing empty process `$paramod\pwm\WIDTH=s32'00000000000000000000000000001000.$proc$src/pwm.v:17$394'.
Found and cleaned up 3 empty switches in `\random.$proc$src/random.v:18$386'.
Removing empty process `random.$proc$src/random.v:18$386'.
Found and cleaned up 2 empty switches in `$paramod\oneshot\TIME=s32'00000000000000000000000000001010.$proc$src/oneshot.v:16$381'.
Removing empty process `$paramod\oneshot\TIME=s32'00000000000000000000000000001010.$proc$src/oneshot.v:16$381'.
Cleaned up 30 empty switches.

8.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module slow_clk.
Optimizing module $paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000.
<suppressed ~1 debug messages>
Optimizing module $paramod\encoder\WIDTH=s32'00000000000000000000000000001000.
Optimizing module $paramod\pwm\WIDTH=s32'00000000000000000000000000001000.
Optimizing module random.
<suppressed ~6 debug messages>
Optimizing module $paramod\oneshot\TIME=s32'00000000000000000000000000001010.
<suppressed ~1 debug messages>
Optimizing module rgb_mixer.

8.5. Executing FLATTEN pass (flatten design).
Deleting now unused module slow_clk.
Deleting now unused module $paramod\debounce\HIST_LEN=s32'00000000000000000000000000001000.
Deleting now unused module $paramod\encoder\WIDTH=s32'00000000000000000000000000001000.
Deleting now unused module $paramod\pwm\WIDTH=s32'00000000000000000000000000001000.
Deleting now unused module random.
Deleting now unused module $paramod\oneshot\TIME=s32'00000000000000000000000000001010.
<suppressed ~7 debug messages>

8.6. Executing TRIBUF pass.

8.7. Executing DEMINOUT pass (demote inout ports to input or output).

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 1 unused cells and 49 unused wires.
<suppressed ~4 debug messages>

8.10. Executing CHECK pass (checking for obvious problems).
Checking module rgb_mixer...
Found and reported 0 problems.

8.11. Executing OPT pass (performing simple optimizations).

8.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

8.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

8.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
    New ctrl vector for $pmux cell $flatten\encoder0.$procmux$466: { $auto$opt_reduce.cc:134:opt_pmux$551 $auto$opt_reduce.cc:134:opt_pmux$549 }
  Optimizing cells in module \rgb_mixer.
Performed a total of 1 changes.

8.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.11.6. Executing OPT_DFF pass (perform DFF optimizations).

8.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

8.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.11.9. Rerunning OPT passes. (Maybe there is more to do..)

8.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

8.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

8.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.11.13. Executing OPT_DFF pass (perform DFF optimizations).

8.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

8.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.11.16. Finished OPT passes. (There is nothing left to do.)

8.12. Executing FSM pass (extract and optimize FSM).

8.12.1. Executing FSM_DETECT pass (finding FSMs in design).

8.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

8.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

8.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

8.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

8.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

8.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

8.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

8.13. Executing OPT pass (performing simple optimizations).

8.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

8.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

8.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\slow_clk0.$procdff$533 ($dff) from module rgb_mixer (D = $flatten\slow_clk0.$add$src/slow_clk.v:14$406_Y [13:0], Q = \slow_clk0.divider, rval = 14'00000000000000).
Adding EN signal on $flatten\random0.$procdff$543 ($dff) from module rgb_mixer (D = $flatten\random0.$xor$src/random.v:24$391_Y, Q = \random0.fb).
Adding EN signal on $flatten\random0.$procdff$542 ($dff) from module rgb_mixer (D = $flatten\random0.$procmux$494_Y, Q = \random0.pulse).
Adding EN signal on $flatten\random0.$procdff$541 ($dff) from module rgb_mixer (D = { 12'000000000000 \encoder0.value 12'000000000000 }, Q = \random0.level).
Adding SRST signal on $flatten\pwm0.$procdff$540 ($dff) from module rgb_mixer (D = $flatten\pwm0.$add$src/pwm.v:21$395_Y, Q = \pwm0.count, rval = 8'00000000).
Adding EN signal on $flatten\oneshot0.$procdff$546 ($adff) from module rgb_mixer (D = $flatten\oneshot0.$0\counter[4:0], Q = \oneshot0.counter).
Adding EN signal on $flatten\oneshot0.$procdff$545 ($adff) from module rgb_mixer (D = $flatten\oneshot0.$0\pout[0:0], Q = \oneshot0.pout).
Adding SRST signal on $flatten\encoder0.$procdff$539 ($dff) from module rgb_mixer (D = \debounce0_b.debounced, Q = \encoder0.old_b, rval = 1'0).
Adding SRST signal on $flatten\encoder0.$procdff$538 ($dff) from module rgb_mixer (D = \debounce0_a.debounced, Q = \encoder0.old_a, rval = 1'0).
Adding SRST signal on $flatten\encoder0.$procdff$537 ($dff) from module rgb_mixer (D = $flatten\encoder0.$procmux$466_Y, Q = \encoder0.value, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$565 ($sdff) from module rgb_mixer (D = $flatten\encoder0.$procmux$466_Y, Q = \encoder0.value).
Adding EN signal on $flatten\encoder0.$procdff$536 ($dff) from module rgb_mixer (D = \encoder0.value [3:0], Q = \encoder0.leds).
Adding SRST signal on $flatten\debounce0_b.$procdff$535 ($dff) from module rgb_mixer (D = { \debounce0_b.button_hist [6:0] \enc0_b }, Q = \debounce0_b.button_hist, rval = 8'00000000).
Adding SRST signal on $flatten\debounce0_b.$procdff$534 ($dff) from module rgb_mixer (D = $flatten\debounce0_b.$procmux$460_Y, Q = \debounce0_b.debounced, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$571 ($sdff) from module rgb_mixer (D = $flatten\debounce0_b.$procmux$460_Y, Q = \debounce0_b.debounced).
Adding SRST signal on $flatten\debounce0_a.$procdff$535 ($dff) from module rgb_mixer (D = { \debounce0_a.button_hist [6:0] \enc0_a }, Q = \debounce0_a.button_hist, rval = 8'00000000).
Adding SRST signal on $flatten\debounce0_a.$procdff$534 ($dff) from module rgb_mixer (D = $flatten\debounce0_a.$procmux$460_Y, Q = \debounce0_a.debounced, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$576 ($sdff) from module rgb_mixer (D = $flatten\debounce0_a.$procmux$460_Y, Q = \debounce0_a.debounced).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 8 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 9 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 10 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 11 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 20 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 21 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 22 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 23 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 24 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 25 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 26 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 27 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 28 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 29 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 30 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.
Setting constant 0-bit at position 31 on $auto$ff.cc:266:slice$555 ($dffe) from module rgb_mixer.

8.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 13 unused cells and 13 unused wires.
<suppressed ~14 debug messages>

8.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~4 debug messages>

8.13.9. Rerunning OPT passes. (Maybe there is more to do..)

8.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

8.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

8.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.13.13. Executing OPT_DFF pass (perform DFF optimizations).

8.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

8.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.13.16. Finished OPT passes. (There is nothing left to do.)

8.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell rgb_mixer.$flatten\slow_clk0.$add$src/slow_clk.v:14$406 ($add).
Removed top 18 bits (of 32) from port Y of cell rgb_mixer.$flatten\slow_clk0.$add$src/slow_clk.v:14$406 ($add).
Removed top 1 bits (of 4) from port B of cell rgb_mixer.$flatten\encoder0.$procmux$469_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rgb_mixer.$flatten\encoder0.$procmux$468_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell rgb_mixer.$auto$opt_dff.cc:195:make_patterns_logic$562 ($ne).
Removed top 12 bits (of 32) from port B of cell rgb_mixer.$flatten\random0.$lt$src/random.v:27$392 ($lt).
Removed top 31 bits (of 32) from port B of cell rgb_mixer.$flatten\oneshot0.$sub$src/oneshot.v:29$385 ($sub).
Removed top 27 bits (of 32) from port Y of cell rgb_mixer.$flatten\oneshot0.$sub$src/oneshot.v:29$385 ($sub).
Removed top 27 bits (of 32) from wire rgb_mixer.$flatten\oneshot0.$sub$src/oneshot.v:29$385_Y.
Removed top 17 bits (of 32) from wire rgb_mixer.$flatten\random0.$0\cnt[31:0].
Removed top 16 bits (of 32) from wire rgb_mixer.$flatten\random0.$1\cnt[31:0].
Removed top 18 bits (of 32) from wire rgb_mixer.$flatten\slow_clk0.$add$src/slow_clk.v:14$406_Y.

8.15. Executing PEEPOPT pass (run peephole optimizers).

8.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

8.17. Executing SHARE pass (SAT-based resource sharing).

8.18. Executing TECHMAP pass (map to technology primitives).

8.18.1. Executing Verilog-2005 frontend: /home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

8.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~62 debug messages>

8.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

8.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module rgb_mixer:
  creating $macc model for $flatten\encoder0.$add$src/encoder.v:34$398 ($add).
  creating $macc model for $flatten\encoder0.$sub$src/encoder.v:37$400 ($sub).
  creating $macc model for $flatten\oneshot0.$sub$src/oneshot.v:29$385 ($sub).
  creating $macc model for $flatten\pwm0.$add$src/pwm.v:21$395 ($add).
  creating $macc model for $flatten\slow_clk0.$add$src/slow_clk.v:14$406 ($add).
  creating $alu model for $macc $flatten\slow_clk0.$add$src/slow_clk.v:14$406.
  creating $alu model for $macc $flatten\pwm0.$add$src/pwm.v:21$395.
  creating $alu model for $macc $flatten\oneshot0.$sub$src/oneshot.v:29$385.
  creating $alu model for $macc $flatten\encoder0.$sub$src/encoder.v:37$400.
  creating $alu model for $macc $flatten\encoder0.$add$src/encoder.v:34$398.
  creating $alu model for $flatten\pwm0.$lt$src/pwm.v:14$393 ($lt): new $alu
  creating $alu model for $flatten\random0.$lt$src/random.v:27$392 ($lt): new $alu
  creating $alu cell for $flatten\random0.$lt$src/random.v:27$392: $auto$alumacc.cc:485:replace_alu$588
  creating $alu cell for $flatten\pwm0.$lt$src/pwm.v:14$393: $auto$alumacc.cc:485:replace_alu$599
  creating $alu cell for $flatten\encoder0.$add$src/encoder.v:34$398: $auto$alumacc.cc:485:replace_alu$604
  creating $alu cell for $flatten\encoder0.$sub$src/encoder.v:37$400: $auto$alumacc.cc:485:replace_alu$607
  creating $alu cell for $flatten\oneshot0.$sub$src/oneshot.v:29$385: $auto$alumacc.cc:485:replace_alu$610
  creating $alu cell for $flatten\pwm0.$add$src/pwm.v:21$395: $auto$alumacc.cc:485:replace_alu$613
  creating $alu cell for $flatten\slow_clk0.$add$src/slow_clk.v:14$406: $auto$alumacc.cc:485:replace_alu$616
  created 7 $alu and 0 $macc cells.

8.22. Executing OPT pass (performing simple optimizations).

8.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~1 debug messages>

8.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

8.22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

8.22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.22.6. Executing OPT_DFF pass (perform DFF optimizations).

8.22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

8.22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.22.9. Rerunning OPT passes. (Maybe there is more to do..)

8.22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

8.22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

8.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.22.13. Executing OPT_DFF pass (perform DFF optimizations).

8.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

8.22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.22.16. Finished OPT passes. (There is nothing left to do.)

8.23. Executing MEMORY pass.

8.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

8.23.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

8.23.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

8.23.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

8.23.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

8.23.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

8.23.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

8.23.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

8.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

8.23.10. Executing MEMORY_COLLECT pass (generating $mem cells).

8.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

8.25. Executing MEMORY_LIBMAP pass (mapping memories to cells).

8.26. Executing TECHMAP pass (map to technology primitives).

8.26.1. Executing Verilog-2005 frontend: /home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

8.26.2. Executing Verilog-2005 frontend: /home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

8.26.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

8.27. Executing ICE40_BRAMINIT pass.

8.28. Executing OPT pass (performing simple optimizations).

8.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~5 debug messages>

8.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.28.3. Executing OPT_DFF pass (perform DFF optimizations).

8.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

8.28.5. Finished fast OPT passes.

8.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

8.30. Executing OPT pass (performing simple optimizations).

8.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

8.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

8.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.30.6. Executing OPT_DFF pass (perform DFF optimizations).

8.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

8.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.30.9. Finished OPT passes. (There is nothing left to do.)

8.31. Executing ICE40_WRAPCARRY pass (wrap carries).

8.32. Executing TECHMAP pass (map to technology primitives).

8.32.1. Executing Verilog-2005 frontend: /home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.32.2. Executing Verilog-2005 frontend: /home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

8.32.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $not.
Using template $paramod$a73b73c5f5a1d9d7f80c290f47c75c83218240f1\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$dc04b7d98e503a7bab16fce2df70e6e2c5ca34d6\_80_ice40_alu for cells of type $alu.
Using template $paramod$403a3c2fa431a154c52a6a5429d7a6260b5d144f\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$713617589782cfade849bb573b5c36106c4b708f\_80_ice40_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~281 debug messages>

8.33. Executing OPT pass (performing simple optimizations).

8.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~200 debug messages>

8.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
<suppressed ~84 debug messages>
Removed a total of 28 cells.

8.33.3. Executing OPT_DFF pass (perform DFF optimizations).

8.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 34 unused cells and 152 unused wires.
<suppressed ~35 debug messages>

8.33.5. Finished fast OPT passes.

8.34. Executing ICE40_OPT pass (performing simple optimizations).

8.34.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$588.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$588.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$604.slice[0].carry: CO=\encoder0.value [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$607.slice[0].carry: CO=\encoder0.value [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$610.slice[0].carry: CO=\oneshot0.counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$613.slice[0].carry: CO=\pwm0.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) rgb_mixer.$auto$alumacc.cc:485:replace_alu$616.slice[0].carry: CO=\slow_clk0.divider [0]

8.34.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.34.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.34.4. Executing OPT_DFF pass (perform DFF optimizations).

8.34.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 1 unused cells and 0 unused wires.
<suppressed ~1 debug messages>

8.34.6. Rerunning OPT passes. (Removed registers in this run.)

8.34.7. Running ICE40 specific optimizations.

8.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.34.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.34.10. Executing OPT_DFF pass (perform DFF optimizations).

8.34.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

8.34.12. Finished OPT passes. (There is nothing left to do.)

8.35. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

8.36. Executing TECHMAP pass (map to technology primitives).

8.36.1. Executing Verilog-2005 frontend: /home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

8.36.2. Continuing TECHMAP pass.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
No more expansions possible.
<suppressed ~122 debug messages>

8.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$604.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$607.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$610.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$613.slice[0].carry ($lut).
Mapping rgb_mixer.$auto$alumacc.cc:485:replace_alu$616.slice[0].carry ($lut).

8.39. Executing ICE40_OPT pass (performing simple optimizations).

8.39.1. Running ICE40 specific optimizations.

8.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~86 debug messages>

8.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

8.39.4. Executing OPT_DFF pass (perform DFF optimizations).

8.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 519 unused wires.
<suppressed ~1 debug messages>

8.39.6. Rerunning OPT passes. (Removed registers in this run.)

8.39.7. Running ICE40 specific optimizations.

8.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~1 debug messages>

8.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.39.10. Executing OPT_DFF pass (perform DFF optimizations).

8.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

8.39.12. Rerunning OPT passes. (Removed registers in this run.)

8.39.13. Running ICE40 specific optimizations.

8.39.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

8.39.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

8.39.16. Executing OPT_DFF pass (perform DFF optimizations).

8.39.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

8.39.18. Finished OPT passes. (There is nothing left to do.)

8.40. Executing TECHMAP pass (map to technology primitives).

8.40.1. Executing Verilog-2005 frontend: /home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

8.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

8.41. Executing ABC pass (technology mapping using ABC).

8.41.1. Extracting gate netlist of module `\rgb_mixer' to `<abc-temp-dir>/input.blif'..
Extracted 252 gates and 352 wires to a netlist network with 99 inputs and 98 outputs.

8.41.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =     112.
ABC: Participating nodes from both networks       =     259.
ABC: Participating nodes from the first network   =     111. (  86.72 % of nodes)
ABC: Participating nodes from the second network  =     148. ( 115.62 % of nodes)
ABC: Node pairs (any polarity)                    =     111. (  86.72 % of names can be moved)
ABC: Node pairs (same polarity)                   =     102. (  79.69 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

8.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      127
ABC RESULTS:        internal signals:      155
ABC RESULTS:           input signals:       99
ABC RESULTS:          output signals:       98
Removing temp directory.

8.42. Executing ICE40_WRAPCARRY pass (wrap carries).

8.43. Executing TECHMAP pass (map to technology primitives).

8.43.1. Executing Verilog-2005 frontend: /home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

8.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 44 unused cells and 231 unused wires.

8.44. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      165
  1-LUT               11
  2-LUT               85
  3-LUT               45
  4-LUT               24
  with \SB_CARRY    (#0)   33
  with \SB_CARRY    (#1)   34

Eliminating LUTs.
Number of LUTs:      165
  1-LUT               11
  2-LUT               85
  3-LUT               45
  4-LUT               24
  with \SB_CARRY    (#0)   33
  with \SB_CARRY    (#1)   34

Combining LUTs.
Number of LUTs:      160
  1-LUT               11
  2-LUT               79
  3-LUT               42
  4-LUT               28
  with \SB_CARRY    (#0)   33
  with \SB_CARRY    (#1)   34

Eliminated 0 LUTs.
Combined 5 LUTs.
<suppressed ~762 debug messages>

8.45. Executing TECHMAP pass (map to technology primitives).

8.45.1. Executing Verilog-2005 frontend: /home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/peter/zerotoasic/oss-cad-suite/lib/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

8.45.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod$c82d7aa204724568255de10e493596086641f722\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod$4cf5305612d86489c1a6171729557670bf08582e\$lut for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod$722bfd9af0ae56ca9d1d12a221cb5ede16461f26\$lut for cells of type $lut.
Using template $paramod$7d45bd12c01d1778446c9474bd2c34ae7ad041ca\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111110 for cells of type $lut.
Using template $paramod$310dc7912bb5756ab08137f6868c0abbecf66466\$lut for cells of type $lut.
Using template $paramod$9ce83c401f07863ef6c07aa36141bf86d010bac8\$lut for cells of type $lut.
Using template $paramod$5766b753e513aa2393ffc25ef94ebc79dc098484\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111110 for cells of type $lut.
Using template $paramod$9ce3cb48532e1935dedb6055756fefa71d90eef1\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~527 debug messages>
Removed 0 unused cells and 338 unused wires.

8.46. Executing AUTONAME pass.
Renamed 2772 objects in module rgb_mixer (21 iterations).
<suppressed ~414 debug messages>

8.47. Executing HIERARCHY pass (managing design hierarchy).

8.47.1. Analyzing design hierarchy..
Top module:  \rgb_mixer

8.47.2. Analyzing design hierarchy..
Top module:  \rgb_mixer
Removed 0 unused modules.

8.48. Printing statistics.

=== rgb_mixer ===

   Number of wires:                136
   Number of wire bits:            490
   Number of public wires:         136
   Number of public wire bits:     490
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                332
     SB_CARRY                       72
     SB_DFF                         33
     SB_DFFE                        10
     SB_DFFER                        6
     SB_DFFESR                      10
     SB_DFFR                         1
     SB_DFFSR                       40
     SB_LUT4                       160

8.49. Executing CHECK pass (checking for obvious problems).
Checking module rgb_mixer...
Found and reported 0 problems.

8.50. Executing JSON backend.

End of script. Logfile hash: 880a681ec5, CPU: user 1.30s system 0.03s, MEM: 24.62 MB peak
Yosys 0.33+72 (git sha1 ac8b31e00, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 47% 25x read_verilog (0 sec), 13% 1x abc (0 sec), ...
